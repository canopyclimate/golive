package phx

import (
	"encoding/base64"
	"testing"
)

func TestMarshalUnmarshal(t *testing.T) {

	bm := &UploadMsg{
		JoinRef: "join",
		MsgRef:  "msg",
		Topic:   "topic",
		Event:   "event",
		Payload: []byte("payload"),
	}
	bytes, err := bm.MarshalBinary()
	if err != nil {
		t.Fatal(err)
	}

	nm := &UploadMsg{}
	err = nm.UnmarshalBinary(bytes)
	if err != nil {
		t.Fatal(err)
	}
	if !bm.Equal(nm) {
		t.Fatalf("%v != %v", bm, nm)
	}
}

func TestFile(t *testing.T) {
	// decode the base64 encoded file
	file, err := base64.StdEncoding.DecodeString(testFileB64)
	if err != nil {
		t.Fatal(err)
	}

	nm := &UploadMsg{}
	err = nm.UnmarshalBinary(file)
	if err != nil {
		t.Fatal(err)
	}

	if nm.JoinRef != "10" {
		t.Fatalf("JoinRef: %v != %v", nm.JoinRef, "10")
	}
	if nm.MsgRef != "11" {
		t.Fatalf("MsgRef: %v != %v", nm.MsgRef, "11")
	}
	if nm.Topic != "lvu:0" {
		t.Fatalf("Topic: %v != %v", nm.Topic, "lvu:0")
	}
	if nm.Event != "chunk" {
		t.Fatalf("Event: %v != %v", nm.Event, "chunk")
	}

}

const testFileB64 = ""

func BenchmarkUploadMsgMarshalUnmarshal(b *testing.B) {
	b.ReportAllocs()
	for i := 0; i < b.N; i++ {
		bm := &UploadMsg{
			JoinRef: "join",
			MsgRef:  "msg",
			Topic:   "topic",
			Event:   "event",
			Payload: []byte("payload"),
		}
		out, err := bm.MarshalBinary()
		if err != nil {
			b.Fatal(err)
		}
		u := new(UploadMsg)
		err = u.UnmarshalBinary(out)
		if err != nil {
			b.Fatal(err)
		}
		if !bm.Equal(u) {
			b.Fatalf("round trip mismatch: %v != %v", bm, u)
		}
	}
}
